use optics

db.createCollection("clients", {
    validator: {
      $jsonSchema: {
          bsonType: "object",
          required: ['client_name', 'client_cellphone', 'client_email', 'client_registered'],
          title: "Client Entry Validation",
          properties: {
            _id: {bsonType : "objectId", description: "Generated by MongoDB. Declared here to prevent insert rejection for additionalProperties : false"},
            client_name: {bsonType : "string", description: "This field must be a string"},
            client_address: {
              bsonType: "object",
              required: ['postal_code'],
              properties: {
                street_address: {bsonType : "string", description: "This field must be a string"},
                floor_and_apartment: {bsonType : "string", description: "This field must be a string"},
                borough: {
                  bsonType: "string",
                  enum : ["Manhattan", "Brooklyn", "Bronk", "New Jersey", "Other"],
                  description: "Must be a valid cadaster borough"},
                postal_code: {bsonType : "string", description: "This field must be a string"},
                country: {bsonType : "string", description: "This field must be a string"},
                address_notes: {bsonType : "string", description: "This field must be a string used for clients in other states and countries"}
              }
            },
            client_cellphone: {bsonType : "string", description: "This field must be a string"},
            client_email: {bsonType : "string", description: "This field must be a string"},
            client_password: {bsonType : "string", description: "This field must contain at least 10 characters (at least 1 uppercase, 1 lowercase, 1 symbol and 1 number. Don't worry, it will be stored as a hashed string"},
            client_referred_by: {bsonType : "objectId", description: "This must be an existing ID identifier of the client who made the referral"},
            client_graduationL: {bsonType : "decimal", description: "This field must be a number with two decimal value"},
            client_graduationR: {bsonType : "decimal", description: "This field must be a number with two decimal value"},
            client_last_graduation_exam: {bsonType : "date", description: "This field must be a valid date"},
            client_registered: {bsonType : "date", description: "This field must be a valid date"},
            last_shoppings: {
              bsonType: "array",
              items:{
                bsonType: "object",
                required: ['glassframe_id', 'price', 'soldBy', 'orderDate'],
                properties: {
                  glassframe_id: {bsonType : "objectId", description: "id of the glassframe sold"},
                  graduationL: {bsonType : "decimal", description: "This field must be a number with two decimal value"},
                  graduationR: {bsonType : "decimal", description: "This field must be a number with two decimal value"},
                  price: {bsonType : "decimal", description: "This field must be a number with two decimal values"},
                  soldBy: {bsonType : "objectId", description: "id of the employee who sold the glasses"},
                  orderDate: {bsonType : "date", description: "This field must be a valid date"}
                }
              }
            }
          },
          "additionalProperties" : false,
      }
    }
})