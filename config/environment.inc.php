<?php

function setupDatabase($client) {
    $dbName = 'optics';
    $db = $client->selectDatabase($dbName);

    // Create collections with validators
    createCollections($db);

    // Import data from JSON files
    importData($db);

    echo "Database setup complete.\n";
}

function createCollections($db) {
    // Add your collection creation code here
    // Example:
    $db->createCollection("clients", [
        'validator' => [
            '$jsonSchema' => [
                'bsonType' => "object",
                'required' => ['client_name', 'client_cellphone', 'client_email', 'client_registered'],
                'title' => "Client Entry Validation",
                'properties' => [
                    '_id' => ['bsonType' => "objectId", 'description' => "Generated by MongoDB. Declared here to prevent insert rejection for additionalProperties : false"],
                    'client_name' => ['bsonType' => "string", 'description' => "This field must be a string"],
                    'client_address' => [
                        'bsonType' => "object",
                        'required' => ['postal_code'],
                        'properties' => [
                            'street_address' => ['bsonType' => "string", 'description' => "This field must be a string"],
                            'floor_and_apartment' => ['bsonType' => "string", 'description' => "This field must be a string"],
                            'borough' => [
                                'bsonType' => "string",
                                'enum' => ["Manhattan", "Brooklyn", "Bronk", "New Jersey", "Other"],
                                'description' => "Must be a valid cadaster borough"
                            ],
                            'postal_code' => ['bsonType' => "string", 'description' => "This field must be a string"],
                            'country' => ['bsonType' => "string", 'description' => "This field must be a string"],
                            'address_notes' => ['bsonType' => "string", 'description' => "This field must be a string used for clients in other states and countries"]
                        ]
                    ],
                    'client_cellphone' => ['bsonType' => "string", 'description' => "This field must be a string"],
                    'client_email' => ['bsonType' => "string", 'description' => "This field must be a string"],
                    'client_password' => ['bsonType' => "string", 'description' => "This field must contain at least 10 characters (at least 1 uppercase, 1 lowercase, 1 symbol and 1 number. Don't worry, it will be stored as a hashed string"],
                    'client_referred_by' => ['bsonType' => "objectId", 'description' => "This must be an existing ID identifier of the client who made the referral"],
                    'client_graduationL' => ['bsonType' => "decimal", 'description' => "This field must be a number with two decimal value"],
                    'client_graduationR' => ['bsonType' => "decimal", 'description' => "This field must be a number with two decimal value"],
                    'client_last_graduation_exam' => ['bsonType' => "date", 'description' => "This field must be a valid date"],
                    'client_registered' => ['bsonType' => "date", 'description' => "This field must be a valid date"],
                    'last_shoppings' => [
                        'bsonType' => "array",
                        'items' => [
                            'bsonType' => "object",
                            'required' => ['glassframe_id', 'price', 'soldBy', 'orderDate'],
                            'properties' => [
                                'glassframe_id' => ['bsonType' => "objectId", 'description' => "id of the glassframe sold"],
                                'graduationL' => ['bsonType' => "decimal", 'description' => "This field must be a number with two decimal value"],
                                'graduationR' => ['bsonType' => "decimal", 'description' => "This field must be a number with two decimal value"],
                                'price' => ['bsonType' => "decimal", 'description' => "This field must be a number with two decimal values"],
                                'soldBy' => ['bsonType' => "objectId", 'description' => "id of the employee who sold the glasses"],
                                'orderDate' => ['bsonType' => "date", 'description' => "This field must be a valid date"]
                            ]
                        ]
                    ]
                ],
                'additionalProperties' => false,
            ]
        ]
    ]);
    
    $db->createCollection("employees", [
        'validator' => [
            '$jsonSchema' => [
                'bsonType' => "object",
                'required' => ['employee_name'],
                'title' => "Employee Entry Validation",
                'properties' => [
                    '_id' => ['bsonType' => "objectId", 'description' => "Generated by MongoDB. Declared here to prevent insert rejection for additionalProperties : false"],
                    'employee_name' => ['bsonType' => "string", 'description' => "This field must be a string"],
                ],
                'additionalProperties' => false,
            ]
        ]
    ]);

    $db->createCollection("glassframes", [
        'validator' => [
            '$jsonSchema' => [
                'bsonType' => "object",
                'required' => ['brand', 'frame_type', 'frame_colour', 'supplier_id', 'price_actual', 'price_supplier'],
                'title' => "Glass Frame Entry Validation",
                'properties' => [
                    '_id' => ['bsonType' => "objectId", 'description' => "Generated by MongoDB. Declared here to prevent insert rejection for additionalProperties : false"],
                    'brand' => [
                        'bsonType' => "string",
                        'enum' => ["Rayban", "Kuboraum", "Etnia"],
                        'description' => "Must be either Rayban, Kuboraum or Etnia"
                    ],
                    'frame_type' => [
                        'bsonType' => "string",
                        'enum' => ["frameless", "acetate", "metallic"],
                        'description' => "Must be either frameless, acetate, or metallic"
                    ],
                    'frame_colour' => ['bsonType' => "string", 'description' => "This field must be a string"],
                    'colourLglass' => ['bsonType' => "string", 'description' => "This field must be a string"],
                    'colourRglass' => ['bsonType' => "string", 'description' => "This field must be a string"],
                    'supplier_id' => ['bsonType' => "objectId", 'description' => "Supplier id"],
                    'price_actual' => ['bsonType' => "decimal", 'description' => "This field must be a number with two decimal values"],
                    'price_supplier' => ['bsonType' => "decimal", 'description' => "This field must be a number with two decimal values"],
                ],
                'additionalProperties' => false,
            ]
        ]
    ]);

    $db->createCollection("suppliers", [
        '$jsonSchema' => [
            'bsonType' => "object",
            'required' => ['supplier_name', 'supplier_address', 'supplier_phone', 'supplier_email', 'supplier_tax_id'],
            'title' => "Supplier Entry Validation",
            'properties' => [
                '_id' => ['bsonType' => "objectId", 'description' => "Generated by MongoDB. Declared here to prevent insert rejection for additionalProperties : false"],
                'supplier_name' => ['bsonType' => "string", 'description' => "This field must be a string"],
                'supplier_address' => [
                    'bsonType' => "object",
                    'required' => ['street_address', 'floor_and_office', 'borough', 'country', 'postal_code'],
                    'properties' => [
                        'street_address' => ['bsonType' => "string", 'description' => "This field must be a string"],
                        'floor_and_office' => ['bsonType' => "string", 'description' => "This field must be a string"],
                        'borough' => ['bsonType' => "string", 'description' => "This field must be a string"],
                        'country' => ['bsonType' => "string", 'description' => "This field must be a string"],
                        'postal_code' => ['bsonType' => "string", 'description' => "This field must be a string"],
                        'address_notes' => ['bsonType' => "string", 'description' => "This field must be a string"],
                    ]
                ],
                'supplier_phone' => ['bsonType' => "string", 'description' => "This field must be a string"],
                'supplier_fax' => ['bsonType' => "string", 'description' => "This field must be a string"],
                'supplier_email' => ['bsonType' => "string", 'description' => "This field must be a string"],
                'supplier_tax_id' => ['bsonType' => "string", 'description' => "This field must be a string"],
            ],
            'additionalProperties' => false,
        ]
    ]);
}

function importData($db) {
    $collections = ['suppliers', 'glassframes', 'employees', 'clients'];
    foreach ($collections as $collection) {
        $jsonFile = ROOT_PATH . "/app/models/db/{$collection}.json";
        if (file_exists($jsonFile)) {
            $data = json_decode(file_get_contents($jsonFile), true);
            $db->$collection->insertMany($data);
            echo "Imported data for {$collection}\n";
        }
    }
}

// Run the setup
setupDatabase($client);
?>